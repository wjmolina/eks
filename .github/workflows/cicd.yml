name: cicd
on:
  push:
    tags:
      - "*.*.*"
jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      eks_name: ${{ steps.terraform-output.outputs.eks_name }}
      ecr_name: ${{ steps.terraform-output.outputs.ecr_name }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: terraform
        run: |
          terraform init
          terraform apply -auto-approve

      - id: terraform-output
        run: |
          echo ::set-output name=eks_name::$(terraform output eks_name | tr -d '"')
          echo ::set-output name=ecr_name::$(terraform output ecr_name | tr -d '"')

  docker:
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: docker
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: ${{ needs.terraform.outputs.eks_name }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  kubernetes:
    name: kubernetes
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: kubernetes
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: tale/kubectl-action@v1

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: jinja
        run: |
          pip install jinja2-cli
          dir=`ls **/*.yml`
          for eachfile in $dir;
          do
            jinja2 --strict \
              -D BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
              -D REGISTRY=${{ steps.ecr-login.outputs.registry }} \
              -D REPOSITORY=${{ needs.terraform.outputs.eks_name }} \
              -D IMAGE_TAG=${{ github.ref_name }} \
            $eachfile > "${eachfile}_"
          done
          for eachfile in $dir;
          do
            rm ${eachfile}
            mv "${eachfile}_" ${eachfile}
          done

      - name: kubectl
        run: |
          aws eks --region us-west-1 update-kubeconfig --name ${{ needs.terraform.outputs.eks_name }}
          kubectl create namespace bot --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -R -f .
